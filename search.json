[
  {
    "objectID": "project.html",
    "href": "project.html",
    "title": "DANL Project",
    "section": "",
    "text": "About this project üëè\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "project.html#summary-statistics",
    "href": "project.html#summary-statistics",
    "title": "DANL Project",
    "section": "2.1 Summary Statistics",
    "text": "2.1 Summary Statistics\n\nmpg &lt;- ggplot2::mpg\n\n\n\n\n  \n\n\n\nskim(mpg) %&gt;% \n  select(-n_missing)\n\n\nData summary\n\n\nName\nmpg\n\n\nNumber of rows\n234\n\n\nNumber of columns\n11\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n6\n\n\nnumeric\n5\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\nskim_variable\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nmanufacturer\n1\n4\n10\n0\n15\n0\n\n\nmodel\n1\n2\n22\n0\n38\n0\n\n\ntrans\n1\n8\n10\n0\n10\n0\n\n\ndrv\n1\n1\n1\n0\n3\n0\n\n\nfl\n1\n1\n1\n0\n5\n0\n\n\nclass\n1\n3\n10\n0\n7\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\ndispl\n1\n3.47\n1.29\n1.6\n2.4\n3.3\n4.6\n7\n‚ñá‚ñÜ‚ñÜ‚ñÉ‚ñÅ\n\n\nyear\n1\n2003.50\n4.51\n1999.0\n1999.0\n2003.5\n2008.0\n2008\n‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñá\n\n\ncyl\n1\n5.89\n1.61\n4.0\n4.0\n6.0\n8.0\n8\n‚ñá‚ñÅ‚ñá‚ñÅ‚ñá\n\n\ncty\n1\n16.86\n4.26\n9.0\n14.0\n17.0\n19.0\n35\n‚ñÜ‚ñá‚ñÉ‚ñÅ‚ñÅ\n\n\nhwy\n1\n23.44\n5.95\n12.0\n18.0\n24.0\n27.0\n44\n‚ñÖ‚ñÖ‚ñá‚ñÅ‚ñÅ"
  },
  {
    "objectID": "project.html#mpg-and-a-type-of-cars",
    "href": "project.html#mpg-and-a-type-of-cars",
    "title": "DANL Project",
    "section": "2.2 MPG and a Type of Cars",
    "text": "2.2 MPG and a Type of Cars\nThe following boxplot shows how the distribution of highway MPG (hwy) varies by a type of cars (class) üöô üöö üöê.\n\nggplot(data = mpg) +\n  geom_boxplot(aes(x = class, y = hwy, fill = class),\n               show.legend = F) +\n  labs(x = \"Class\", y = \"Highway\\nMPG\")"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "YOUR NAME",
    "section": "",
    "text": "Finley Malloc majors in Data Analytics at SUNY Geneseo. When not working on data analytics, Finley enjoys spending time unicycling and playing with her pet iguana."
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "YOUR NAME",
    "section": "Education",
    "text": "Education\nState University of New York at Geneseo | Geneseo, NY  B.S. in Data Analytics | Aug 2022 - May 2026  Minor in Business Administration"
  },
  {
    "objectID": "index.html#experience",
    "href": "index.html#experience",
    "title": "YOUR NAME",
    "section": "Experience",
    "text": "Experience\nStarbucks Analytics | Data Analyst Intern | May 2024 - Aug 2024"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn‚Äôt specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "ggplot Basics",
    "section": "",
    "text": "The ggplot functions allow for the creation of various visual charts and graphs to display the relationships between variables. We can use coding to determine specific graphs as well as the details in these graphs to make them more visually appealing to viewers. An example of a ggplot code is below.\n\nggplot(data = mpg) + \n  geom_point(mapping = \n               aes(x = displ, \n                   y = hwy, \n                   color = class) )\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family not\nfound in Windows font database\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family not\nfound in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family not\nfound in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database"
  },
  {
    "objectID": "posts/starwars/starwars_df.html",
    "href": "posts/starwars/starwars_df.html",
    "title": "Starwars",
    "section": "",
    "text": "Let‚Äôs analyze the starwars data:\nstarwars &lt;- read_csv(\"https://bcdanl.github.io/data/starwars.csv\")"
  },
  {
    "objectID": "posts/starwars/starwars_df.html#variable-description-for-starwars-data.frame",
    "href": "posts/starwars/starwars_df.html#variable-description-for-starwars-data.frame",
    "title": "Starwars",
    "section": "Variable Description for starwars data.frame",
    "text": "Variable Description for starwars data.frame\nThe following describes the variables in the starwars data.frame.\n\nfilms List of films the character appeared in\nname Name of the character\nspecies Name of species\nheight Height (cm)\nmass Weight (kg)\nhair_color, skin_color, eye_color Hair, skin, and eye colors\nbirth_year Year born (BBY = Before Battle of Yavin)\nsex The biological sex of the character, namely male, female, hermaphroditic, or none (as in the case for Droids).\ngender The gender role or gender identity of the character as determined by their personality or the way they were programmed (as in the case for Droids).\nhomeworld Name of homeworld"
  },
  {
    "objectID": "posts/starwars/starwars_df.html#human-vs.-droid",
    "href": "posts/starwars/starwars_df.html#human-vs.-droid",
    "title": "Starwars",
    "section": "Human vs.¬†Droid",
    "text": "Human vs.¬†Droid\n\nggplot(data = \n         starwars %&gt;% \n         filter(species %in% c(\"Human\", \"Droid\"))) +\n  geom_boxplot(aes(x = species, y = mass, \n                   fill = species),\n               show.legend = FALSE)"
  },
  {
    "objectID": "blog-listing.html",
    "href": "blog-listing.html",
    "title": "Insightful Analytics",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\nggplot Basics\n\n\n\n\n\n\n\n\n\nFeb 20, 2024\n\n\nJason Copella\n\n\n0 min\n\n\n\n\n\n\n  \n\n\n\n\nggplot Basics\n\n\n\n\n\n\n\n\n\nFeb 20, 2024\n\n\nJason Copella\n\n\n1 min\n\n\n\n\n\n\n  \n\n\n\n\nStarwars\n\n\n\n\n\n\n\n\n\nOct 30, 2023\n\n\nYour Name\n\n\n2 min\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\n\n\nOct 27, 2023\n\n\nYOUR NAME\n\n\n0 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "projectproposal.html#dataset-proposal",
    "href": "projectproposal.html#dataset-proposal",
    "title": "Project Proposal",
    "section": "Dataset Proposal",
    "text": "Dataset Proposal\nMy project will study the a large dataset containing various statistics and salaries for every NBA player on a roster for the 2022-23 season. This will allow me to examine which statisitics are most valued by NBA front offices when deciding how much money they offer a given player, as well as the most important statistics, both basic and advanced, when deciding to give a player a ‚Äúmax‚Äù contract. With advanced statistics and analytics consistenly becoming more important in league circles, this will allow me to examine if advanced statistics that go beyond the naked eye have become more valued if front offices. I can also see which stats are most strongly correlated with higher salaries, as well as winning the most games. This will also allow me to see which basic stats are most strongly correlated to certain adavanced stats and vice versa. I plan to utilize a wide range of ggplot methods to examine these results such as correlation heat maps, bar graphs, and basic plots."
  },
  {
    "objectID": "projectproposal.html#looking-at-the-dataset",
    "href": "projectproposal.html#looking-at-the-dataset",
    "title": "Project Proposal",
    "section": "Looking at the dataset",
    "text": "Looking at the dataset\nBelow, I have provided code to load and then examine the first 20 frames of the dataset I plan to use for my project:\n\nfinal_project_dataset&lt;-read.csv(\"nba_2022-23_stats_salary.csv\")\nhead(final_project_dataset, n=20)\n\n    X           Player.Name   Salary Position Age    Team GP GS   MP   FG  FGA\n1   0         Stephen Curry 48070014       PG  34     GSW 56 56 34.7 10.0 20.2\n2   1             John Wall 47345760       PG  32     LAC 34  3 22.2  4.1  9.9\n3   2     Russell Westbrook 47080179       PG  34 LAL/LAC 73 24 29.1  5.9 13.6\n4   3          LeBron James 44474988       PF  38     LAL 55 54 35.5 11.1 22.2\n5   4          Kevin Durant 44119845       PF  34 BRK/PHO 47 47 35.6 10.3 18.3\n6   5          Bradley Beal 43279250       SG  29     WAS 50 50 33.5  8.9 17.6\n7   6         Kawhi Leonard 42492492       SF  31     LAC 52 50 33.6  8.6 16.8\n8   7           Paul George 42492492       SF  32     LAC 56 56 34.6  8.2 17.9\n9   8 Giannis Antetokounmpo 42492492       PF  28     MIL 63 63 32.1 11.2 20.3\n10  9        Damian Lillard 42492492       PG  32     POR 58 58 36.3  9.6 20.7\n11 10         Klay Thompson 40600080       SF  32     GSW 69 69 33.0  7.9 18.1\n12 11          Kyrie Irving 38917057    PG-SG  30 BRK/DAL 60 60 37.4  9.9 20.1\n13 12           Rudy Gobert 38172414        C  30     MIN 70 70 30.7  5.1  7.8\n14 13       Khris Middleton 37984276       SF  31     MIL 33 19 24.3  5.4 12.3\n15 14         Anthony Davis 37980720        C  29     LAL 56 54 34.0  9.7 17.2\n16 15          Jimmy Butler 37653300       PF  33     MIA 64 64 33.4  7.5 13.9\n17 16         Tobias Harris 37633050       SF  30     PHI 74 74 32.9  5.7 11.4\n18 17          Kemba Walker 37281261       PG  32     DAL  9  1 16.0  2.7  6.3\n19 18            Trae Young 37096500       PG  24     ATL 73 73 34.8  8.2 19.0\n20 19           Zach LaVine 37096500       SG  27     CHI 77 77 35.9  8.7 18.0\n     FG. X3P X3PA  X3P.  X2P X2PA  X2P.  eFG.  FT  FTA   FT. ORB DRB  TRB  AST\n1  0.493 4.9 11.4 0.427  5.1  8.8 0.579 0.614 4.6  5.0 0.915 0.7 5.4  6.1  6.3\n2  0.408 1.0  3.2 0.303  3.1  6.7 0.459 0.457 2.3  3.3 0.681 0.4 2.3  2.7  5.2\n3  0.436 1.2  3.9 0.311  4.7  9.7 0.487 0.481 2.8  4.3 0.656 1.2 4.6  5.8  7.5\n4  0.500 2.2  6.9 0.321  8.9 15.3 0.580 0.549 4.6  5.9 0.768 1.2 7.1  8.3  6.8\n5  0.560 2.0  4.9 0.404  8.3 13.4 0.617 0.614 6.5  7.1 0.919 0.4 6.3  6.7  5.0\n6  0.506 1.6  4.4 0.365  7.3 13.2 0.552 0.551 3.8  4.6 0.842 0.8 3.1  3.9  5.4\n7  0.512 2.0  4.8 0.416  6.6 11.9 0.551 0.572 4.7  5.4 0.871 1.1 5.4  6.5  3.9\n8  0.457 2.8  7.6 0.371  5.4 10.3 0.521 0.536 4.6  5.3 0.871 0.8 5.3  6.1  5.1\n9  0.553 0.7  2.7 0.275 10.5 17.6 0.596 0.572 7.9 12.3 0.645 2.2 9.6 11.8  5.7\n10 0.463 4.2 11.3 0.371  5.4  9.4 0.574 0.564 8.8  9.6 0.914 0.8 4.0  4.8  7.3\n11 0.436 4.4 10.6 0.412  3.6  7.6 0.470 0.556 1.7  1.9 0.879 0.6 3.6  4.1  2.4\n12 0.494 3.1  8.3 0.379  6.8 11.8 0.574 0.572 4.1  4.6 0.905 1.0 4.1  5.1  5.5\n13 0.659 0.0  0.0 0.000  5.1  7.8 0.663 0.659 3.1  4.9 0.644 3.3 8.3 11.6  1.2\n14 0.436 1.5  4.9 0.315  3.8  7.4 0.516 0.499 2.8  3.1 0.902 0.8 3.4  4.2  4.9\n15 0.563 0.3  1.3 0.257  9.3 15.9 0.589 0.573 6.2  7.9 0.784 3.5 9.1 12.5  2.6\n16 0.539 0.6  1.6 0.350  6.9 12.3 0.564 0.560 7.4  8.7 0.850 2.2 3.7  5.9  5.3\n17 0.501 1.7  4.4 0.389  4.0  7.0 0.570 0.575 1.5  1.7 0.876 0.9 4.8  5.7  2.5\n18 0.421 0.8  3.1 0.250  1.9  3.2 0.586 0.482 1.9  2.3 0.810 0.3 1.4  1.8  2.1\n19 0.429 2.1  6.3 0.335  6.1 12.7 0.476 0.485 7.8  8.8 0.886 0.8 2.2  3.0 10.2\n20 0.485 2.6  7.1 0.375  6.1 11.0 0.556 0.558 4.7  5.6 0.848 0.5 3.9  4.5  4.2\n   STL BLK TOV  PF  PTS Total.Minutes  PER   TS. X3PAr   FTr ORB. DRB. TRB.\n1  0.9 0.4 3.2 2.1 29.4          1941 24.1 0.656 0.564 0.248  2.3 16.8  9.7\n2  0.8 0.4 2.4 1.7 11.4           755 13.6 0.498 0.322 0.334  2.1 11.4  6.8\n3  1.0 0.5 3.5 2.2 15.9          2126 16.1 0.513 0.289 0.317  4.7 16.5 10.8\n4  0.9 0.6 3.2 1.6 28.9          1954 23.9 0.583 0.309 0.268  3.7 20.8 12.5\n5  0.7 1.4 3.3 2.1 29.1          1672 25.9 0.677 0.267 0.387  1.2 19.5 10.5\n6  0.9 0.7 2.9 2.1 23.2          1673 19.7 0.593 0.249 0.260  2.8  9.9  6.5\n7  1.4 0.5 1.7 1.6 23.8          1748 23.9 0.623 0.287 0.320  3.7 17.8 10.8\n8  1.5 0.4 3.1 2.8 23.8          1939 19.6 0.588 0.424 0.293  2.6 17.0  9.9\n9  0.8 0.8 3.9 3.1 31.1          2024 29.0 0.605 0.134 0.604  7.3 30.0 19.1\n10 0.9 0.3 3.3 1.9 32.2          2107 26.7 0.645 0.547 0.464  2.4 12.8  7.6\n11 0.7 0.4 1.8 1.9 21.9          2279 14.7 0.576 0.584 0.105  1.9 11.7  6.9\n12 1.1 0.8 2.1 2.8 27.1          2241 22.4 0.613 0.412 0.227  3.0 12.3  7.7\n13 0.8 1.4 1.7 3.0 13.4          2148 18.9 0.675 0.005 0.623 12.2 29.8 21.2\n14 0.7 0.2 2.2 2.1 15.1           801 17.4 0.551 0.399 0.251  3.8 14.0  9.1\n15 1.1 2.0 2.2 2.6 25.9          1904 27.8 0.627 0.077 0.462 11.3 27.6 19.7\n16 1.8 0.3 1.6 1.3 22.9          2138 27.6 0.647 0.116 0.625  7.5 13.3 10.3\n17 0.9 0.5 1.2 2.0 14.7          2436 14.8 0.602 0.383 0.153  3.3 17.0 10.3\n18 0.2 0.2 0.4 1.2  8.0           144 15.0 0.543 0.491 0.368  2.4 10.6  6.5\n19 1.1 0.1 4.1 1.4 26.2          2541 22.0 0.573 0.331 0.460  2.4  7.0  4.7\n20 0.9 0.2 2.5 2.1 24.8          2768 19.0 0.607 0.392 0.308  1.7 12.2  7.1\n   AST. STL. BLK. TOV. USG.  OWS DWS   WS WS.48 OBPM DBPM  BPM VORP\n1  30.0  1.3  0.9 12.5 31.0  5.8 2.0  7.8 0.192  7.5  0.1  7.5  4.7\n2  35.3  1.8  1.4 17.1 27.0 -0.4 0.7  0.3 0.020 -0.8 -0.4 -1.2  0.1\n3  38.6  1.7  1.3 18.4 27.7 -0.6 2.6  1.9 0.044  0.3 -0.1  0.2  1.2\n4  33.5  1.2  1.4 11.6 33.3  3.2 2.4  5.6 0.138  5.5  0.6  6.1  4.0\n5  24.5  1.0  3.4 13.4 30.7  4.7 2.1  6.8 0.194  6.0  1.2  7.1  3.9\n6  26.6  1.3  1.7 12.9 29.2  2.2 1.2  3.4 0.099  2.9 -1.2  1.8  1.6\n7  19.6  2.0  1.4  8.1 27.0  4.9 2.2  7.1 0.194  5.1  0.9  6.1  3.5\n8  24.2  2.1  0.9 13.4 29.5  2.3 2.3  4.6 0.114  2.4  0.3  2.8  2.3\n9  33.2  1.2  2.1 13.2 38.8  4.9 3.7  8.6 0.204  5.8  2.7  8.5  5.4\n10 35.0  1.2  0.8 11.7 33.8  8.2 0.8  9.0 0.205  8.3 -1.2  7.1  4.9\n11 11.0  1.0  1.1  8.6 26.4  1.2 1.9  3.1 0.066  1.5 -1.7 -0.3  1.0\n12 25.4  1.4  1.7  8.8 28.9  5.4 2.0  7.4 0.159  4.8 -0.7  4.1  3.5\n13  5.6  1.2  3.9 14.9 16.3  4.3 3.5  7.8 0.174  0.0  0.7  0.7  1.4\n14 30.7  1.4  0.5 13.6 27.4  1.0 1.0  1.9 0.117  1.0 -0.3  0.8  0.6\n15 13.0  1.5  5.1  9.5 28.4  5.5 3.4  9.0 0.226  4.6  1.7  6.3  4.0\n16 27.1  2.7  1.0  8.2 25.6  9.4 2.9 12.3 0.277  6.7  2.0  8.7  5.8\n17 11.4  1.4  1.5  9.0 18.2  3.1 2.8  5.9 0.116  0.6  0.1  0.7  1.7\n18 20.1  0.7  1.2  5.7 22.1  0.2 0.1  0.3 0.098  0.3 -0.6 -0.3  0.1\n19 42.5  1.5  0.3 15.2 32.6  5.3 1.4  6.7 0.126  5.3 -2.0  3.3  3.4\n20 18.7  1.2  0.6 11.0 28.3  4.2 2.9  7.1 0.123  2.7 -0.7  1.9  2.7"
  }
]